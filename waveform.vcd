$date
	Sun Feb 16 20:23:30 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_mips_single_cycle $end
$var wire 1 ! zero $end
$var wire 32 " reg_t3 [31:0] $end
$var wire 32 # reg_t2 [31:0] $end
$var wire 32 $ reg_t1 [31:0] $end
$var wire 32 % reg_t0 [31:0] $end
$var wire 32 & pc [31:0] $end
$var wire 32 ' mem_read_data [31:0] $end
$var wire 32 ( instruction [31:0] $end
$var wire 32 ) alu_result [31:0] $end
$var reg 1 * clk $end
$var reg 1 + reset $end
$scope module uut $end
$var wire 1 * clk $end
$var wire 32 , reg_t0 [31:0] $end
$var wire 32 - reg_t1 [31:0] $end
$var wire 32 . reg_t2 [31:0] $end
$var wire 32 / reg_t3 [31:0] $end
$var wire 1 + reset $end
$var wire 1 ! zero $end
$var wire 32 0 write_data [31:0] $end
$var wire 32 1 sign_extend [31:0] $end
$var wire 1 2 reg_write $end
$var wire 1 3 reg_dst $end
$var wire 32 4 read_data_2 [31:0] $end
$var wire 32 5 read_data_1 [31:0] $end
$var wire 32 6 pc_next [31:0] $end
$var wire 32 7 pc [31:0] $end
$var wire 1 8 mem_write $end
$var wire 1 9 mem_to_reg $end
$var wire 32 : mem_read_data [31:0] $end
$var wire 1 ; mem_read $end
$var wire 1 < jump $end
$var wire 32 = instruction [31:0] $end
$var wire 1 > branch $end
$var wire 1 ? alu_src $end
$var wire 32 @ alu_result [31:0] $end
$var wire 2 A alu_op [1:0] $end
$var wire 32 B alu_input_2 [31:0] $end
$var wire 4 C alu_ctrl [3:0] $end
$scope module IM $end
$var wire 32 D addr [31:0] $end
$var reg 32 E instruction [31:0] $end
$var integer 32 F i [31:0] $end
$upscope $end
$scope module alu_ctrl_inst $end
$var wire 6 G funct [5:0] $end
$var wire 2 H alu_op [1:0] $end
$var reg 4 I alu_ctrl [3:0] $end
$upscope $end
$scope module alu_inst $end
$var wire 4 J alu_ctrl [3:0] $end
$var wire 32 K b [31:0] $end
$var wire 1 ! zero $end
$var wire 32 L a [31:0] $end
$var reg 32 M result [31:0] $end
$upscope $end
$scope module cu_inst $end
$var wire 6 N opcode [5:0] $end
$var reg 2 O alu_op [1:0] $end
$var reg 1 ? alu_src $end
$var reg 1 > branch $end
$var reg 1 < jump $end
$var reg 1 ; mem_read $end
$var reg 1 9 mem_to_reg $end
$var reg 1 8 mem_write $end
$var reg 1 3 reg_dst $end
$var reg 1 2 reg_write $end
$upscope $end
$scope module dm_inst $end
$var wire 32 P addr [31:0] $end
$var wire 1 * clk $end
$var wire 1 ; mem_read $end
$var wire 1 8 mem_write $end
$var wire 32 Q write_data [31:0] $end
$var wire 32 R read_data [31:0] $end
$var integer 32 S i [31:0] $end
$upscope $end
$scope module pc_inst $end
$var wire 1 * clk $end
$var wire 32 T pc_next [31:0] $end
$var wire 1 + reset $end
$var reg 32 U pc [31:0] $end
$upscope $end
$scope module rf_inst $end
$var wire 1 * clk $end
$var wire 32 V read_data1 [31:0] $end
$var wire 32 W read_data2 [31:0] $end
$var wire 5 X read_reg1 [4:0] $end
$var wire 5 Y read_reg2 [4:0] $end
$var wire 1 2 reg_write $end
$var wire 1 Z reset $end
$var wire 32 [ write_data [31:0] $end
$var wire 5 \ write_reg [4:0] $end
$var integer 32 ] i [31:0] $end
$upscope $end
$scope module se_inst $end
$var wire 16 ^ immediate [15:0] $end
$var wire 32 _ extended [31:0] $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 ` i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b100000000 `
b101 _
b101 ^
b100000 ]
b1001 \
b101 [
zZ
b1001 Y
b0 X
b0 W
b0 V
b0 U
b100 T
b100000000 S
b0 R
b0 Q
b101 P
b0 O
b1000 N
b101 M
b0 L
b101 K
b10 J
b10 I
b0 H
b101 G
b100000000 F
b100000000010010000000000000101 E
b0 D
b10 C
b101 B
b0 A
b101 @
1?
0>
b100000000010010000000000000101 =
0<
0;
b0 :
09
08
b0 7
b100 6
b0 5
b0 4
03
12
b101 1
b101 0
bx /
bx .
bx -
bx ,
1+
0*
b101 )
b100000000010010000000000000101 (
b0 '
b0 &
bx %
bx $
bx #
bx "
0!
$end
#10000
b1010 0
b1010 [
b1010 )
b1010 @
b1010 M
b1010 P
b1010 B
b1010 K
b1010 \
b1000 6
b1000 T
b1010 1
b1010 _
b1010 ^
b1010 G
b1010 Y
b100000000010100000000000001010 (
b100000000010100000000000001010 =
b100000000010100000000000001010 E
b0 4
b0 Q
b0 W
b100 &
b100 7
b100 D
b100 U
0+
1*
#20000
0*
#30000
b1111 0
b1111 [
b1000 \
b1111 )
b1111 @
b1111 M
b1111 P
b10 A
b10 H
b10 O
0?
13
b1100 6
b1100 T
b100000000100000 1
b100000000100000 _
b100000000100000 ^
b100000 G
b101 5
b101 L
b101 V
b1001 X
b0 N
b1001010100100000000100000 (
b1001010100100000000100000 =
b1001010100100000000100000 E
b1010 4
b1010 Q
b1010 W
b1000 &
b1000 7
b1000 D
b1000 U
1*
#40000
0*
#50000
b11111111111111111111111111111011 0
b11111111111111111111111111111011 [
b11111111111111111111111111111011 )
b11111111111111111111111111111011 @
b11111111111111111111111111111011 M
b11111111111111111111111111111011 P
b110 C
b110 I
b110 J
b10000 6
b10000 T
b100000000100010 1
b100000000100010 _
b100000000100010 ^
b100010 G
b1001010100100000000100010 (
b1001010100100000000100010 =
b1001010100100000000100010 E
b1100 &
b1100 7
b1100 D
b1100 U
1*
#60000
0*
#70000
b0 0
b0 [
1!
b0 )
b0 @
b0 M
b0 P
b0 C
b0 I
b0 J
b10100 6
b10100 T
b100000000100100 1
b100000000100100 _
b100000000100100 ^
b100100 G
b1001010100100000000100100 (
b1001010100100000000100100 =
b1001010100100000000100100 E
b10000 &
b10000 7
b10000 D
b10000 U
1*
#80000
0*
#90000
b1111 0
b1111 [
0!
b1111 )
b1111 @
b1111 M
b1111 P
b1 C
b1 I
b1 J
b11000 6
b11000 T
b100000000100101 1
b100000000100101 _
b100000000100101 ^
b100101 G
b1001010100100000000100101 (
b1001010100100000000100101 =
b1001010100100000000100101 E
b10100 &
b10100 7
b10100 D
b10100 U
1*
#100000
0*
#110000
1!
b0 0
b0 [
b0 B
b0 K
b10 C
b10 I
b10 J
b1010 \
b0 )
b0 @
b0 M
b0 P
b0 A
b0 H
b0 O
18
02
1?
03
b11100 6
b11100 T
b0 1
b0 _
b0 ^
b0 G
b0 5
b0 L
b0 V
b0 X
b101011 N
b10101100000010100000000000000000 (
b10101100000010100000000000000000 =
b10101100000010100000000000000000 E
b11000 &
b11000 7
b11000 D
b11000 U
1*
#120000
0*
#130000
b1010 0
b1010 [
b1010 '
b1010 :
b1010 R
b1011 \
08
1;
12
19
b100000 6
b100000 T
b0 4
b0 Q
b0 W
b1011 Y
b100011 N
b10001100000010110000000000000000 (
b10001100000010110000000000000000 =
b10001100000010110000000000000000 E
b11100 &
b11100 7
b11100 D
b11100 U
1*
#140000
0*
#150000
b101 0
b101 [
b0 '
b0 :
b0 R
b101 B
b101 K
b110 C
b110 I
b110 J
b1001 \
0!
b101 )
b101 @
b101 M
b101 P
b1 A
b1 H
b1 O
1>
0;
02
09
0?
b100100 6
b100100 T
b10 1
b10 _
b10 ^
b10 G
b1001 Y
b1010 5
b1010 L
b1010 V
b1011 X
b100 N
b10001011010010000000000000010 (
b10001011010010000000000000010 =
b10001011010010000000000000010 E
b101 4
b101 Q
b101 W
b100000 &
b100000 7
b100000 D
b100000 U
1*
#160000
0*
#170000
1!
b0 0
b0 [
b10 C
b10 I
b10 J
b0 \
b0 B
b0 K
b0 )
b0 @
b0 M
b0 P
b0 A
b0 H
b0 O
1<
0>
b0 6
b0 T
b0 1
b0 _
b0 ^
b0 G
b0 4
b0 Q
b0 W
b0 Y
b0 5
b0 L
b0 V
b0 X
b10 N
b1000000000000000000000000000 (
b1000000000000000000000000000 =
b1000000000000000000000000000 E
b100100 &
b100100 7
b100100 D
b100100 U
1*
#180000
0*
#190000
b101 0
b101 [
0!
b101 )
b101 @
b101 M
b101 P
b1001 \
b101 B
b101 K
0<
12
1?
b100 6
b100 T
b101 1
b101 _
b101 ^
b101 G
b101 4
b101 Q
b101 W
b1001 Y
b1000 N
b100000000010010000000000000101 (
b100000000010010000000000000101 =
b100000000010010000000000000101 E
b0 &
b0 7
b0 D
b0 U
1*
#200000
0*
#210000
b1010 0
b1010 [
b1010 )
b1010 @
b1010 M
b1010 P
b1010 B
b1010 K
b1010 \
b1000 6
b1000 T
b1010 1
b1010 _
b1010 ^
b1010 G
b1010 4
b1010 Q
b1010 W
b1010 Y
b100000000010100000000000001010 (
b100000000010100000000000001010 =
b100000000010100000000000001010 E
b100 &
b100 7
b100 D
b100 U
1*
